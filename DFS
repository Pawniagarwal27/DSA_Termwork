#include<iostream>
using namespace std;
#define MAX 100

int stack[MAX];
int arr[MAX][MAX];
int top=-1;
 int k=0;


void push(int num)
{
    if(top==MAX-1)
        cout<<"Overflow";
    else
        stack[++top]=num;
}

void pop()
{
    if(top==-1)
        cout<<"Underflow"<<endl;
    else
    {
        cout<<"Deleted "<<stack[top]<<" ";
        top-=1;
    }

}

bool searchArray(int num,int output[])
{
    bool b=true;
    for(int i=0;i<=k;i++)
    {
        if(output[i]==num)
            b=false;
    }
    return b;
}

int main()
{
    int output[MAX];
    int n,num;
    int nov=0;
    cout<<"Enter the number of vertices in graph";
    cin>>n;
	cout<<"Does your Graph includes 0 Vertex [1-Yes, 2-No] ";
    cin>>nov;

	if(nov==2)
		n+=1;

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
            arr[i][j]=0;
    }

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
          cout<<"Enter Vertex Connected with Vertex "<<i<<endl;
          cin>>num;
        if(num<0)
            break;
        else
         arr[i][num]=1;
        }
    }

    //int arr[n][n]={{0,1,1,0,0},{1,0,0,1,1},{1,0,0,1,0},{0,1,1,0,1},{0,1,0,1,0}};
    int snode;
    cout<<"Enter Source Node ";
    cin>>snode;
    push(snode);
    int i=0;
    output[k++]=snode;
    do
    {
        snode=stack[top];
        for(i=0;i<n;i++)
        {
            if(arr[snode][i]==1 && searchArray(i,output))
            {
                push(i);
                output[k++]=i;
                arr[snode][i]=0;
                break;
            }
        }
        if(i==n)
            pop();
    }while(k<n && top!=-1);

    cout<<endl<<endl;

    for(int i=0;i<k;i++)
        cout<<output[i]<<" ";

    cout<<"Value of k "<<k;
    return 0;
}

